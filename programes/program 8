#include <stdio.h>
#include <unistd.h>
(1ST QUESTION)

int main() {
    pid_t pid, parent_pid;

    // Fork the current process
    pid = fork();

    if (pid < 0) {
        // Error occurred
        fprintf(stderr, "Fork failed\n");
        return 1;
    } else if (pid == 0) {
        // Child process
        printf("Child process:\n");
        printf("PID: %d\n", getpid());
        printf("Parent PID: %d\n", getppid());
    } else {
        // Parent process
        printf("Parent process:\n");
        printf("PID: %d\n", getpid());
        printf("Parent PID: %d\n", getppid());
    }

    return 0;
}


(2ND QUESTION)

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>

#define BUFFER_SIZE 4096

int main(int argc, char *argv[]) {
    if (argc != 3) {
        fprintf(stderr, "Usage: %s <source_file> <destination_file>\n", argv[0]);
        return 1;
    }

    int source_fd, dest_fd;
    ssize_t bytes_read, bytes_written;
    char buffer[BUFFER_SIZE];

    // Open source file for reading
    source_fd = open(argv[1], O_RDONLY);
    if (source_fd == -1) {
        perror("Error opening source file");
        return 1;
    }

    // Open destination file for writing (create if it doesn't exist, truncate if it does)
    dest_fd = open(argv[2], O_WRONLY | O_CREAT | O_TRUNC, 0666);
    if (dest_fd == -1) {
        perror("Error opening destination file");
        close(source_fd);
        return 1;
    }

    // Copy contents
    while ((bytes_read = read(source_fd, buffer, BUFFER_SIZE)) > 0) {
        bytes_written = write(dest_fd, buffer, bytes_read);
        if (bytes_written != bytes_read) {
            perror("Write error");
            close(source_fd);
            close(dest_fd);
            return 1;
        }
    }

    if (bytes_read == -1) {
        perror("Read error");
        close(source_fd);
        close(dest_fd);
        return 1;
    }

    // Close files
    if (close(source_fd) == -1) {
        perror("Error closing source file");
        return 1;
    }
    if (close(dest_fd) == -1) {
        perror("Error closing destination file");
        return 1;
    }

    printf("File copied successfully.\n");

    return 0;
}





(3RD QUESTION)

#include <stdio.h>

// Structure to represent a process
typedef struct {
    int pid;        // Process ID
    int arrival_time;   // Arrival time
    int burst_time;     // Burst time
} Process;

// Function to calculate average waiting time
float calculateAverageWaitingTime(Process processes[], int n) {
    int total_waiting_time = 0;
    int current_time = 0;

    for (int i = 0; i < n; i++) {
        // Waiting time for current process is the difference between current time and arrival time
        int waiting_time = current_time - processes[i].arrival_time;
        
        // If the process arrives after the current time, update current time
        if (current_time < processes[i].arrival_time) {
            current_time = processes[i].arrival_time;
        }
        
        total_waiting_time += waiting_time;
        
        // Update current time by adding burst time of current process
        current_time += processes[i].burst_time;
    }

    return (float)total_waiting_time / n;
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Create an array to store processes
    Process processes[n];

    // Input process details
    printf("Enter arrival time and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d:\n", i + 1);
        printf("Arrival time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst time: ");
        scanf("%d", &processes[i].burst_time);
        processes[i].pid = i + 1;
    }

    // Calculate and display average waiting time
    float avg_waiting_time = calculateAverageWaitingTime(processes, n);
    printf("Average waiting time: %.2f\n", avg_waiting_time);

    return 0;
}





(4TH QUESTION)

#include <stdio.h>
#include <limits.h>

// Structure to represent a process
typedef struct {
    int pid;            // Process ID
    int arrival_time;   // Arrival time
    int burst_time;     // Burst time
    int remaining_time; // Remaining burst time
} Process;

// Function to find the process with the smallest remaining burst time
int findShortestJob(Process processes[], int n, int current_time) {
    int shortest_job_index = -1;
    int shortest_job_time = INT_MAX;

    for (int i = 0; i < n; i++) {
        if (processes[i].arrival_time <= current_time && processes[i].remaining_time < shortest_job_time && processes[i].remaining_time > 0) {
            shortest_job_index = i;
            shortest_job_time = processes[i].remaining_time;
        }
    }

    return shortest_job_index;
}

// Function to calculate average waiting time
float calculateAverageWaitingTime(Process processes[], int n) {
    int total_waiting_time = 0;
    int current_time = 0;

    for (int i = 0; i < n; i++) {
        // Find the process with the smallest remaining burst time
        int shortest_job_index = findShortestJob(processes, n, current_time);
        
        if (shortest_job_index == -1) {
            break;
        }

        // Waiting time for current process is the difference between current time and arrival time
        int waiting_time = current_time - processes[shortest_job_index].arrival_time;
        
        total_waiting_time += waiting_time;

        // Update current time by adding burst time of current process
        current_time += processes[shortest_job_index].remaining_time;

        // Reduce remaining time of the current process
        processes[shortest_job_index].remaining_time = 0;
    }

    return (float)total_waiting_time / n;
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Create an array to store processes
    Process processes[n];

    // Input process details
    printf("Enter arrival time and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d:\n", i + 1);
        printf("Arrival time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst time: ");
        scanf("%d", &processes[i].burst_time);
        processes[i].pid = i + 1;
        processes[i].remaining_time = processes[i].burst_time;
    }

    // Calculate and display average waiting time
    float avg_waiting_time = calculateAverageWaitingTime(processes, n);
    printf("Average waiting time: %.2f\n", avg_waiting_time);

    return 0;
}





(5TH QUESTION)

#include <stdio.h>
#include <limits.h>

// Structure to represent a process
typedef struct {
    int pid;            // Process ID
    int arrival_time;   // Arrival time
    int burst_time;     // Burst time
    int priority;       // Priority (lower value means higher priority)
} Process;

// Function to find the process with the highest priority
int findHighestPriority(Process processes[], int n, int current_time) {
    int highest_priority_index = -1;
    int highest_priority = INT_MAX;

    for (int i = 0; i < n; i++) {
        if (processes[i].arrival_time <= current_time && processes[i].priority < highest_priority && processes[i].burst_time > 0) {
            highest_priority_index = i;
            highest_priority = processes[i].priority;
        }
    }

    return highest_priority_index;
}

// Function to calculate average waiting time
float calculateAverageWaitingTime(Process processes[], int n) {
    int total_waiting_time = 0;
    int current_time = 0;

    for (int i = 0; i < n; i++) {
        // Find the process with the highest priority
        int highest_priority_index = findHighestPriority(processes, n, current_time);
        
        if (highest_priority_index == -1) {
            break;
        }

        // Waiting time for current process is the difference between current time and arrival time
        int waiting_time = current_time - processes[highest_priority_index].arrival_time;
        
        total_waiting_time += waiting_time;

        // Update current time by adding burst time of current process
        current_time += processes[highest_priority_index].burst_time;

        // Reduce burst time of the current process
        processes[highest_priority_index].burst_time = 0;
    }

    return (float)total_waiting_time / n;
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Create an array to store processes
    Process processes[n];

    // Input process details
    printf("Enter arrival time, burst time, and priority for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d:\n", i + 1);
        printf("Arrival time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst time: ");
        scanf("%d", &processes[i].burst_time);
        printf("Priority: ");
        scanf("%d", &processes[i].priority);
        processes[i].pid = i + 1;
    }

    // Calculate and display average waiting time
    float avg_waiting_time = calculateAverageWaitingTime(processes, n);
    printf("Average waiting time: %.2f\n", avg_waiting_time);

    return 0;
}






(6TH QUESTION)

#include <stdio.h>

// Structure to represent a process
typedef struct {
    int pid;            // Process ID
    int arrival_time;   // Arrival time
    int burst_time;     // Burst time
    int priority;       // Priority (lower value indicates higher priority)
    int remaining_time; // Remaining burst time
} Process;

// Function to find the process with the highest priority
int findHighestPriority(Process processes[], int n, int current_time) {
    int highest_priority_index = -1;
    int highest_priority = INT_MAX;

    for (int i = 0; i < n; i++) {
        if (processes[i].arrival_time <= current_time && processes[i].priority < highest_priority && processes[i].remaining_time > 0) {
            highest_priority_index = i;
            highest_priority = processes[i].priority;
        }
    }

    return highest_priority_index;
}

// Function to calculate average waiting time
float calculateAverageWaitingTime(Process processes[], int n) {
    int total_waiting_time = 0;
    int current_time = 0;

    // Process remaining_time is initialized with burst time
    for (int i = 0; i < n; i++) {
        processes[i].remaining_time = processes[i].burst_time;
    }

    while (1) {
        // Find the process with the highest priority
        int highest_priority_index = findHighestPriority(processes, n, current_time);
        
        if (highest_priority_index == -1) {
            break;
        }

        // Update current time by 1 time unit
        current_time++;

        // Reduce remaining time of the current process
        processes[highest_priority_index].remaining_time--;

        // If the process has completed execution
        if (processes[highest_priority_index].remaining_time == 0) {
            // Calculate waiting time for the process
            int waiting_time = current_time - processes[highest_priority_index].arrival_time - processes[highest_priority_index].burst_time;
            total_waiting_time += waiting_time;
        }
    }

    return (float)total_waiting_time / n;
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Create an array to store processes
    Process processes[n];

    // Input process details
    printf("Enter arrival time, burst time, and priority for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d:\n", i + 1);
        printf("Arrival time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst time: ");
        scanf("%d", &processes[i].burst_time);
        printf("Priority: ");
        scanf("%d", &processes[i].priority);
        processes[i].pid = i + 1;
    }

    // Calculate and display average waiting time
    float avg_waiting_time = calculateAverageWaitingTime(processes, n);
    printf("Average waiting time: %.2f\n", avg_waiting_time);

    return 0;
}






(7TH QUESTION)

#include <stdio.h>
#include <stdlib.h>

// Structure to represent a process
typedef struct {
    int pid;            // Process ID
    int arrival_time;   // Arrival time
    int burst_time;     // Burst time
    int completion_time; // Completion time
    int turnaround_time; // Turnaround time
    int waiting_time;   // Waiting time
    int executed;       // Flag to mark if the process has been executed
} Process;

// Function to compare processes based on their burst time
int compare(const void *a, const void *b) {
    return ((Process *)a)->burst_time - ((Process *)b)->burst_time;
}

// Function to calculate completion time, turnaround time, and waiting time
void calculateTimes(Process processes[], int n) {
    int current_time = 0;

    for (int i = 0; i < n; i++) {
        current_time += processes[i].burst_time;
        processes[i].completion_time = current_time;
        processes[i].turnaround_time = processes[i].completion_time - processes[i].arrival_time;
        processes[i].waiting_time = processes[i].turnaround_time - processes[i].burst_time;
    }
}

// Function to calculate average waiting time
float calculateAverageWaitingTime(Process processes[], int n) {
    int total_waiting_time = 0;

    for (int i = 0; i < n; i++) {
        total_waiting_time += processes[i].waiting_time;
    }

    return (float)total_waiting_time / n;
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Create an array to store processes
    Process processes[n];

    // Input process details
    printf("Enter arrival time and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d:\n", i + 1);
        printf("Arrival time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst time: ");
        scanf("%d", &processes[i].burst_time);
        processes[i].pid = i + 1;
        processes[i].executed = 0;
    }

    // Sort processes based on burst time
    qsort(processes, n, sizeof(Process), compare);

    // Calculate completion time, turnaround time, and waiting time
    calculateTimes(processes, n);

    // Calculate and display average waiting time
    float avg_waiting_time = calculateAverageWaitingTime(processes, n);
    printf("Average waiting time: %.2f\n", avg_waiting_time);

    return 0;
}






(8TH QUESTION)

#include <stdio.h>

#define MAX_PROCESSES 10

// Structure to represent a process
typedef struct {
    int pid;            // Process ID
    int arrival_time;   // Arrival time
    int burst_time;     // Burst time
    int remaining_time; // Remaining burst time
} Process;

// Function to simulate Round Robin scheduling algorithm
void roundRobin(Process processes[], int n, int quantum) {
    int remaining_processes = n;
    int current_time = 0;
    int completed_processes = 0;

    printf("Gantt Chart:\n");
    printf("0 ");

    while (completed_processes < n) {
        int flag = 0; // Flag to indicate if any process has been executed in current time slice

        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0) {
                flag = 1;

                if (processes[i].remaining_time > quantum) {
                    printf("| P%d | %d ", processes[i].pid, current_time + quantum);
                    current_time += quantum;
                    processes[i].remaining_time -= quantum;
                } else {
                    printf("| P%d | %d ", processes[i].pid, current_time + processes[i].remaining_time);
                    current_time += processes[i].remaining_time;
                    processes[i].remaining_time = 0;
                    processes[i].arrival_time = -1; // Mark process as completed
                    completed_processes++;
                }
            }
        }

        if (!flag) {
            printf("| IDLE | %d ", current_time); // If no process is executing, print IDLE
            current_time++; // Increment time in case of IDLE
        }
    }

    printf("\n");
}

int main() {
    int n, quantum;
    Process processes[MAX_PROCESSES];

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    if (n <= 0 || n > MAX_PROCESSES) {
        printf("Invalid number of processes.\n");
        return 1;
    }

    printf("Enter time quantum for Round Robin: ");
    scanf("%d", &quantum);

    if (quantum <= 0) {
        printf("Invalid time quantum.\n");
        return 1;
    }

    printf("Enter arrival time and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d:\n", i + 1);
        printf("Arrival time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst time: ");
        scanf("%d", &processes[i].burst_time);
        processes[i].pid = i + 1;
        processes[i].remaining_time = processes[i].burst_time;
    }

    printf("\nRound Robin Scheduling:\n");
    roundRobin(processes, n, quantum);

    return 0;
}






